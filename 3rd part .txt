import cv2

# Initialize the video capture
cap = cv2.VideoCapture(0)

# Check if the camera is opened successfully
if not cap.isOpened():
    print("Error opening video capture.")
    exit()

# Define the lower and upper bounds for the blue color range (adjust as needed)
lowblue = (100, 100, 100)
uppblue = (130, 255, 255)

# Variable to track if two fingers with blue tape are combined
fingcomb = False

while True:
    # Read the current frame from the video capture
    r, f = cap.read()

    # Break the loop if reading the frame was unsuccessful
    if not r:
        print("Error reading video frame.")
        break

    # Convert the frame to the HSV color space
    hsv = cv2.cvtColor(f, cv2.COLOR_BGR2HSV)

    # Create a mask based on the blue color range
    mask = cv2.inRange(hsv, lowblue, uppblue)

    # Apply morphological operations to remove noise
    mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, None, iterations=2)
    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, None, iterations=2)

    # Find contours in the mask
    count, _ = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Check if at least two contours are detected
    if len(count) >= 2:
        fingcomb = True
    else:
        fingcomb = False

    # Draw a bounding box around the combined fingers (if detected)
    if fingcomb:
        cv2.rectangle(f, (0, 0), (f.shape[1], f.shape[0]), (0, 255, 0), 2)

        # Save the current frame as an image
        cv2.imwrite("image.png", f)

    # Display the resulting frame
    cv2.imshow("Blue finger", f)

    # Break the loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture and close all windows
cap.release()
cv2.destroyAllWindows()